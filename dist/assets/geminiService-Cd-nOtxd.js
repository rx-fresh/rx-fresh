import{G as g,T as o}from"./index-DUq5CQsX.js";let f=null;async function _(){if(!f)try{let s=await fetch("/data/prescribers-optimized.json");if(s.ok||(s=await fetch("/data/prescribers.json")),!s.ok)throw new Error(`Failed to load prescribers data: ${s.status}`);f=await s.json(),console.log(`âœ… Loaded ${f.length} prescribers from database`)}catch(s){console.error("Failed to load prescribers data:",s),f=[]}return f}function b(s,n){const l={19033:{lat:39.9496,lng:-75.2899},19026:{lat:39.9496,lng:-75.2899},19082:{lat:39.9565,lng:-75.2699},19063:{lat:39.9177,lng:-75.3877},19064:{lat:39.91,lng:-75.35},19013:{lat:39.8498,lng:-75.3557}},d=l[s],c=l[n];if(!d||!c)return 999;const r=d.lat-c.lat,m=d.lng-c.lng,e=Math.sqrt(r*r+m*m)*69;return Math.round(e*10)/10}async function w(s,n,l=25){const c=(await _()).filter(e=>{var h;if(!(((h=e.drugs)==null?void 0:h.some(u=>u.toLowerCase().includes(s.toLowerCase())))||e.name.toLowerCase().includes(s.toLowerCase())))return!1;const p=b(n,e.address.zip);return e.distance_miles=p,p<=l}).map(e=>({npi:e.npi,name:e.name,specialty:e.specialty,address:{street:e.address.street,city:e.address.city,state:e.address.state,zip:e.address.zip},drug:{brand_name:e.drug.brand_name},total_claims:e.total_claims,distance_miles:e.distance_miles})),r=new Map;return c.forEach(e=>{const i=`${e.name}-${e.specialty}`;r.has(i)||r.set(i,[]),r.get(i).push(e)}),Array.from(r.values()).map(e=>{if(e.length===1)return e[0];const i=e[0],p=e.reduce((t,a)=>t+a.total_claims,0),h=e.reduce((t,a)=>t+a.distance_miles,0)/e.length,u=e.reduce((t,a)=>a.distance_miles<t.distance_miles||a.total_claims>t.total_claims?a:t);return{...i,total_claims:p,distance_miles:Math.round(h*10)/10,address:u.address,locations:e.map(t=>({address:t.address,claims:t.total_claims,distance:t.distance_miles}))}}).sort((e,i)=>i.total_claims-e.total_claims)}let y;const P={type:o.OBJECT,properties:{drug:{type:o.STRING,description:"The specific medication name the user is asking for."},zip:{type:o.STRING,description:"The 5-digit US ZIP code for the user's desired location."},radius:{type:o.NUMBER,description:"The search radius in miles. Defaults to 25 if not specified."}},required:["drug","zip"]},z={type:o.ARRAY,items:{type:o.OBJECT,properties:{npi:{type:o.NUMBER,description:"The original NPI of the prescriber."},score:{type:o.NUMBER,description:"A patient satisfaction score from 1.0 to 5.0, calculated based on specialty relevance and claim volume. Can be a float."},focus:{type:o.STRING,description:"A short, analytical sentence about their prescribing focus, derived from their specialty and high claim count for this drug."}},required:["npi","score","focus"]}},D=s=>{const n=s.zip.length>5?s.zip.substring(0,5):s.zip;return`${s.street}, ${s.city}, ${s.state} ${n}`},R=async s=>{try{if(!y){const t="AIzaSyAjZuK0foNG4Pyd846FPLlR3DEi_0lUuoQ";y=new g({apiKey:t})}const n=await y.models.generateContent({model:"gemini-2.5-flash",contents:`Parse the user's request to identify the drug and location. Default radius to 25 miles if not specified. User request: "${s}"`,config:{responseMimeType:"application/json",responseSchema:P}}),{drug:l,zip:d,radius:c=25}=JSON.parse(n.text),r=await w(l,d,c);if(!r||r.length===0)return[];const m={prescribers:r,results_count:r.length},e=`
      You are an AI data analyst for RX Prescribers.
      Given a JSON array of real prescriber data, your task is to analyze and enhance each entry.
      Do NOT invent any information not present in the input (like phone numbers or addresses). Your role is to analyze, not fabricate.
      For each prescriber, generate:
      1. A 'score' (1.0-5.0) strictly based on their specialty and total_claims. Higher claims and a relevant specialty (e.g., Psychiatry for alprazolam) should lead to a higher score. This score represents how strong a match they are.
      2. A compelling 'focus' sentence that summarizes their experience with the drug, referencing their high 'total_claims' and specialty.

      Return ONLY the JSON array with the enrichment fields ('npi', 'score', 'focus') for each prescriber.

      Real data to analyze:
      ${JSON.stringify(m.prescribers.map(t=>({npi:t.npi,name:t.name,specialty:t.specialty,total_claims:t.total_claims})))}
    `,i=await y.models.generateContent({model:"gemini-2.5-flash",contents:e,config:{responseMimeType:"application/json",responseSchema:z}}),p=JSON.parse(i.text),h=new Map(p.map(t=>[t.npi,t]));return m.prescribers.map(t=>{const a=h.get(t.npi);return{name:t.name,specialty:t.specialty,address:D(t.address),score:(a==null?void 0:a.score)||3.5,focus:(a==null?void 0:a.focus)||`Experienced prescriber of ${t.drug.brand_name}.`,total_claims:t.total_claims,distance_miles:t.distance_miles}}).sort((t,a)=>a.score-t.score)}catch(n){throw console.error("Error in RAG service:",n),new Error("Failed to fetch and process prescriber data.")}};export{R as findPrescribers};
